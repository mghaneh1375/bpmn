'use strict';

var inherits = require('inherits');

var PropertiesActivator = require('../../PropertiesActivator');

var processProps = require('./parts/ProcessProps'),
    eventProps = require('./parts/EventProps'),
    linkProps = require('./parts/LinkProps'),
    documentationProps = require('./parts/DocumentationProps'),
    idProps = require('./parts/IdProps'),
    nameProps = require('./parts/NameProps'),
    abilityProps = require('./parts/AbilityProps'),
    responsibleProps = require('./parts/ResponsibleProps'),
    peopleProps = require('./parts/PeopleProps'),
    rulesProps = require('./parts/RulesProps'),
    guideProps = require('./parts/GuideProps'),
    serviceProps = require('./parts/ServiceProps'),
    dataObjectProps = require('./parts/DataObjectProps'),
    softwareProps = require('./parts/SoftwareProps'),
    executableProps = require('./parts/ExecutableProps'),
    procedureProps = require('./parts/ProcedureProps');

function createGeneralTabGroups(element, bpmnFactory, elementRegistry, translate) {

  var generalGroup = {
    id: 'general',
    label: translate('اطلاعات عمومی'),
    entries: []
  };
  
  idProps(generalGroup, element, translate);
  nameProps(generalGroup, element, translate);
  // abilityProps(generalGroup, element, translate);
  processProps(generalGroup, element, translate);
  procedureProps(generalGroup, element, translate);
  // executableProps(generalGroup, element, translate);

  var detailsGroup = {
    id: 'details',
    label: translate('جزئیات'),
    entries: []
  };
  linkProps(detailsGroup, element, translate);
  eventProps(detailsGroup, element, bpmnFactory, elementRegistry, translate);

  var documentationGroup = {
    id: 'documentation',
    label: translate('مستندات'),
    entries: []
  };

  documentationProps(documentationGroup, element, bpmnFactory, translate);

  return [
    generalGroup,
    detailsGroup,
    documentationGroup
  ];

}

function createSecondaryTabGroups(element, bpmnFactory, elementRegistry, translate) {

  var secondaryGroup = {
    id: 'secondary',
    label: translate('اطلاعات تکمیلی'),
    entries: []
  };

  responsibleProps(secondaryGroup, element, translate);
  peopleProps(secondaryGroup, element, translate);
  rulesProps(secondaryGroup, element, translate);
  guideProps(secondaryGroup, element, translate);
  serviceProps(secondaryGroup, element, translate);
  dataObjectProps(secondaryGroup, element, translate);

  return [
    secondaryGroup
  ];

}

function BpmnPropertiesProvider(eventBus, bpmnFactory, elementRegistry, translate) {

  PropertiesActivator.call(this, eventBus);

  this.getTabs = function(element) {

    var generalTab = {
      id: 'general',
      label: translate('اطلاعات عمومی'),
      groups: createGeneralTabGroups(element, bpmnFactory, elementRegistry, translate)
    };

    if(element.type == "bpmn:Task") {

      var secondaryTab = {
        id: 'secondary',
        label: translate('اطلاعات تکمیلی'),
        groups: createSecondaryTabGroups(element, bpmnFactory, elementRegistry, translate)
      };

      return [
        generalTab,
        secondaryTab
      ];
    }

    return [
      generalTab
    ];

  };
}

BpmnPropertiesProvider.$inject = [ 'eventBus', 'bpmnFactory', 'elementRegistry', 'translate' ];

inherits(BpmnPropertiesProvider, PropertiesActivator);

module.exports = BpmnPropertiesProvider;
