export function test() {

    var startEvent = cli.append(
        'Process_1',
        'bpmn:StartEvent',
        '100,100'
    );

    var gateway = cli.append(
        startEvent,
        'bpmn:ExclusiveGateway',
        '150,0'
    );

    var serviceTask = cli.append(
        gateway,
        'bpmn:ServiceTask',
        '150,0'
    );

    var callActivity = cli.append(
        gateway,
        'bpmn:CallActivity',
        '150,90'
    );

    cli.undo();

    callActivity = cli.append(
        gateway,
        'bpmn:CallActivity',
        '150,120'
    );

    var endEvent = cli.append(
        serviceTask,
        'bpmn:EndEvent',
        '150,0'
    );

    cli.connect(
        callActivity,
        endEvent,
        'bpmn:SequenceFlow'
    );

    cli.setLabel(callActivity, 'CallActivity');

    var gatewayShape = cli.element(gateway);

    var textAnnotation = cli.create(
        'bpmn:TextAnnotation',
        {
            x: gatewayShape.x - 50,
            y: gatewayShape.y + 150
        },
        gatewayShape.parent
    );

    cli.setLabel(textAnnotation, 'i-am-text');

    cli.setLabel(gateway, 'ExclusiveGateway');

    cli.move(callActivity, { x: 20, y: 30 });

    cli.undo();

    cli.undo();

    cli.undo();

    cli.redo();

    cli.redo();

    cli.redo();

    cli.save('bpmn');
}

var cli;

function translate(type) {
    switch (type){
        case "start_activity":
            return 'bpmn:StartEvent';
        case "end_activity":
            return 'bpmn:EndEvent';
        case "task":
            return 'bpmn:Task';
        case "exclusive":
            return 'bpmn:ExclusiveGateway';
        case "line":
            return 'bpmn:SequenceFlow';
    }
}

function append(parent, type, left, top, width, height) {

    if(parent == null)
        parent = 'Process_1';

    return cli.create(
        type,
        left + "," + top,
        parent,
        width,
        height
    );
}

function connect(src, target, type, parent) {

    if(parent == null)
        parent = 'Process_1';

    return cli.connect(
        src,
        target,
        type,
        parent
    );
}


export function parser(data, modeling) {

    data = JSON.parse(data);
    cli = window.cli;
    var node, width, height, type, properties;

    for(var i = 0; i < data.length; i++) {

        type = translate(data[i].type);

        if(type != "bpmn:SequenceFlow") {

            width = -1;
            height = -1;

            properties = {"name": data[i].name, "id": data[i].id};

            if (data[i].width != null && data[i].width != undefined && data[i].width.length > 0) {
                properties["width"] = data[i].width;
                width = data[i].width;
            }

            if (data[i].height != null && data[i].height != undefined && data[i].height.length > 0) {
                properties["height"] = data[i].height;
                height = data[i].height;
            }

            node = append(data[i].parentId, type, data[i].left, data[i].top, width, height);

            var attrs = data[i].attrs;

            if (attrs != null) {
                for (var j = 0; j < attrs.length; j++) {
                    for (var k in attrs[j]) {
                        if (attrs[j].hasOwnProperty(k)) {
                            properties[k] = attrs[j][k];
                        }
                    }
                }
            }
        }
        else {
            properties = {"id": data[i].id};
            node = connect(data[i].src, data[i].target, type, data[i].parentId);
        }

        modeling.updateProperties(cli.element(node), properties);
    }

}