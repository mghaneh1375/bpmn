import * as idProps from './parts/idProps';
import * as nameProps from './parts/NameProps';
import * as tagProps from './parts/TagProps';
import * as descProps from './parts/DescProps';
import * as responsibleProps from './parts/ResponsibleProps';
import * as responsibleProps2 from './parts/ResponsibleProps2';
import * as guideProps from './parts/GuideProps';
import * as entryProps from './parts/EntryProps';
import * as outputProps from './parts/OutputProps';
import * as placeProps from './parts/PlaceProps';
import * as software from './parts/SoftwareProps';
import * as hardware from './parts/HardwareProps';
import * as general from './parts/GeneralNameProps';
import * as serial from './parts/SerialProps';
import * as importance from './parts/ImportanceProps';
import * as purpose from './parts/PurposrProps';
import * as eghdam from './parts/EghdamProps';
import * as worker from './parts/WorkerProps';
import * as attach from './parts/AttachProps';
import * as other from './parts/OtherProps';
import * as bologh from './parts/BologhProps';
import * as mission from './parts/MissionProps';
import * as time from './parts/TimeProps';
import * as frequency from './parts/FrequencyProps';
import * as evaluation from './parts/EvaluationProps';
import * as participants from './parts/ParticipantsProps';
import * as sameDiagram from './parts/SameNameProps';
import * as category from './parts/CategoryProps';
import * as nextDiagram from './parts/NextDiagramProps';
import * as upDiagram from './parts/UpDiagramProps';
import * as confusion from './parts/ConfusionProps';
import * as achievement from './parts/AchievementProps';
import * as starter from './parts/StarterProps';
import * as step from './parts/StepProps';

function createGeneralTabGroups(element) {

    var generalGroup = {
        id: 'general',
        label: 'اطلاعات عمومی',
        entries: []
    };

    idProps.getElement(generalGroup, element);
    nameProps.getElement(generalGroup, element);

    var detailsGroup = {
        id: 'details',
        label: 'جزئیات',
        entries: []
    };

    general.getElement(detailsGroup, element);
    sameDiagram.getElement(detailsGroup, element);
    category.getElement(detailsGroup, element);
    serial.getElement(detailsGroup, element);
    worker.getElement(detailsGroup, element);
    tagProps.getElement(detailsGroup, element);
    
    importance.getElement(detailsGroup, element);
    upDiagram.getElement(detailsGroup, element);
    nextDiagram.getElement(detailsGroup, element);

    descProps.getElement(detailsGroup, element);
    other.getElement(detailsGroup, element);

    var documentationGroup = {
        id: 'documentation',
        label: 'مستندات',
        entries: []
    };

    attach.getElement(documentationGroup, element);

    return [
        generalGroup,
        detailsGroup,
        documentationGroup
    ];
}

function createForthTabGroups(element, bpmnFactory, elementRegistry, translate) {

    var forthGroup = {
        id: 'forth',
        label: 'اطلاعات فرآیندی',
        entries: []
    };

    eghdam.getElement(forthGroup, element);
    confusion.getElement(forthGroup, element);
    bologh.getElement(forthGroup, element);
    time.getElement(forthGroup, element);
    frequency.getElement(forthGroup, element);

    purpose.getElement(forthGroup, element);
    achievement.getElement(forthGroup, element);
    mission.getElement(forthGroup, element);
    evaluation.getElement(forthGroup, element);
    participants.getElement(forthGroup, element);

    starter.getElement(forthGroup, element);
    step.getElement(forthGroup, element);

    return [
        forthGroup
    ];
}

function createSecondaryTabGroups(element, bpmnFactory, elementRegistry, translate) {

    var secondaryGroup = {
        id: 'secondary',
        label: 'اطلاعات تکمیلی',
        entries: []
    };

    responsibleProps.getElement(secondaryGroup, element);
    guideProps.getElement(secondaryGroup, element);
    software.getElement(secondaryGroup, element);
    hardware.getElement(secondaryGroup, element);
    entryProps.getElement(secondaryGroup, element);
    outputProps.getElement(secondaryGroup, element);
    placeProps.getElement(secondaryGroup, element);

    return [
        secondaryGroup
    ];

}

function createThirdTabGroups(element, bpmnFactory, elementRegistry, translate) {

    var thirdGroup = {
        id: 'third',
        label: 'دسترسی',
        entries: []
    };

    responsibleProps2.getElement(thirdGroup, element);

    return [
        thirdGroup
    ];

}

function createFifthTabGroups(element, bpmnFactory, elementRegistry, translate) {

    var thirdGroup = {
        id: 'fifth',
        label: 'خدمات',
        entries: []
    };

    responsibleProps2.getElement(thirdGroup, element);

    return [
        thirdGroup
    ];

}

export function getTabs(elem) {

    var allow = false;

    var generalTab = {
        id: 'general',
        label: 'اطلاعات عمومی',
        groups: createGeneralTabGroups(elem)
    };

    if(elem.type == "bpmn:DataObjectReference") {

        var cli = window.cli;
        var detail = cli.element(elem.id);
        var out = detail.outgoing;

        for(var i = 0; i < out.length; i++) {
            var obj = out[i].businessObject;
            if(obj.$parent.$type == "bpmn:IntermediateThrowEvent") {
                allow = true;
                break;
            }
        }
    }

    else if(elem.type == "bpmn:Collaboration") {

        var thirdTab = {
            id: 'third',
            label: 'دسترسی',
            groups: createThirdTabGroups(elem)
        };

        var forthTab = {
            id: 'forth',
            label: 'شناسنامه فرآیند',
            groups: createForthTabGroups(elem)
        };

        return [
            generalTab,
            forthTab,
            thirdTab
        ];
    }

    if(elem.type.indexOf('Task') != -1 || elem.type == "bpmn:CallActivity" || elem.type == "bpmn:SubProcess") {

        var secondaryTab = {
            id: 'secondary',
            label: 'اطلاعات تکمیلی',
            groups: createSecondaryTabGroups(elem)
        };

        return [
            generalTab,
            secondaryTab
        ];
    }

    if(allow) {
        var fifthTab = {
            id: 'services',
            label: 'شناسنامه خدمت',
            groups: createFifthTabGroups(elem)
        };

        return [
            generalTab,
            fifthTab
        ];
    }

    return [
        generalTab
    ];

}
